<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="340" height="466" showStatusBar="false"
					   right="0" bottom="0" frameRate="24"
					   creationComplete="creationCompleteHandler(event)"
					   close="closeHandler(event)" backgroundColor="0xefefef">
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenMax;
			
			import device.Device;
			import device.RunningDevice;
			import device.running.IosDevice;
			
			import flash.filters.BitmapFilterQuality;
			
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import renderer.PhysicialDeviceSettingsWindow;
			import renderer.RunningDeviceRenderer;
			
			import spark.filters.DropShadowFilter;
			
			public static const dropShadowFilter:DropShadowFilter = new DropShadowFilter(2.0, 45, 0x000000, 0.1, 10.0, 10.0, 0.9, BitmapFilterQuality.HIGH, false, false, false);
			
			public static const isMacOs:Boolean = Capabilities.os.indexOf("Mac") > -1;
			
			public static var alreadyBuilded:Boolean = false;
			
			[Bindable]
			private var port:String = "8080";
			
			[Bindable]
			public var devices:RunningDevicesManager;
			
			[Bindable]
			public var simulators:AvailableSimulatorsManager;
			
			public function get logsFolder():File{
				return File.userDirectory.resolvePath(".actiontestscript/mobilestation/logs");
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				logsFolder.deleteDirectory(true);
				cleanDirectory(File.userDirectory.resolvePath("Library/mobileStationTemp"));
				simulators = new AvailableSimulatorsManager();
				devices = new RunningDevicesManager(port, isMacOs);
				
				settingsButton.visible = isMacOs;
			}
			
			public function restartDevice(dev:Device):void{
				devices.restartDev(dev);
			}
			
			protected function closeHandler(event:Event):void
			{
				devices.terminate();
			}
			
			protected function cleanDirectory(directory:File):void
			{
				if (directory.isDirectory) 
				{
					var dirArray: Array = new Array();
					var files:Array = directory.getDirectoryListing();
					for (var i:int = 0; i < files.length; i++)
					{
						if (files[i].isDirectory && files[i].nativePath.indexOf("driver_") > -1)
						{
							dirArray.push(files[i]);
						}
					}
					
					for each(var d:File in dirArray) {
						d.deleteDirectory(true);
					}
				}
			}
			
			protected function clickGroup_clickHandler(event:MouseEvent):void
			{
				if(simulatorsGroup.height == 26){
					TweenMax.to(simulatorsGroup, 0.3, {height:426})
				}else{
					TweenMax.to(simulatorsGroup, 0.3, {height:26})
				}
			}
			
			protected function clickConnected_clickHandler(event:MouseEvent):void
			{
				if(simulatorsGroup.height != 26){
					TweenMax.to(simulatorsGroup, 0.3, {height:26})
				}
			}
			
			protected function settings_clickHandler(event:MouseEvent):void
			{
				// create and configure the TitleWindow
				var tw:PhysicialDeviceSettingsWindow = new PhysicialDeviceSettingsWindow();
				for each(var dv:RunningDevice in devices.collection) {
					if(!dv.simulator && dv is IosDevice) {
						tw.devices.push(dv);
					}
				}
				
				// open the TitleWindow as a modal popup window
				PopUpManager.addPopUp(tw, this, true);
				PopUpManager.centerPopUp(tw);
			}
			
		]]>
	</fx:Script>
	
	<s:Group id="clickConnected" buttonMode="true" height="26" left="5" right="5" top="5"
			 click="clickConnected_clickHandler(event)" filters="{dropShadowFilter}"
			 rollOut="settingsButton.alpha=0.5" rollOver="settingsButton.alpha=1.0">
		<s:Rect width="100%" height="100%" radiusX="3">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="0xFFFFFF"/>
					<s:GradientEntry color="0xDADADA"/>
				</s:LinearGradient>
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke color="#ffffff" weight="1"/>
			</s:stroke>
		</s:Rect>
		<s:HGroup width="100%" paddingLeft="7" paddingRight="3" verticalCenter="0" verticalAlign="middle" gap="3">
			<s:Label fontSize="13" text="Connected Devices" fontWeight="bold"/>
			<s:Spacer width="100%"/>
			<s:Group id="settingsButton" visible="false" alpha="0.5" buttonMode="true" click="settings_clickHandler(event)"
					 toolTip="Apple developer settings" height="22" width="22">
				<s:BitmapImage source="assets/icons/20/apple.png" smooth="true" smoothingQuality="high"/>
			</s:Group>
		</s:HGroup>
	</s:Group>
	
	<s:VGroup top="26" left="6" right="6" bottom="30" gap="3">
		<s:VGroup filters="{RunningDeviceRenderer.dropShadowFilterMiddle}" gap="3" paddingTop="12" paddingLeft="2" paddingRight="2"
				  visible="{devices.collection.length==0}" includeInLayout="{devices.collection.length==0}">
			<s:Label fontWeight="bold" 
					 text="No devices found"/>
			<s:Label fontStyle="italic" fontSize="11"
					 text="(Connect devices with usb cable to this station)"/>
		</s:VGroup>

		<s:Spacer height="4"/>
		<s:List width="100%" height="100%"
				alternatingItemColors="[#efefef, #dedede]" borderVisible="false"
				contentBackgroundAlpha="0.0" dataProvider="{devices.collection}"
				itemRenderer="renderer.RunningDeviceRenderer" useVirtualLayout="false"/>
	</s:VGroup>

	<s:Group id="simulatorsGroup" left="5" right="5" bottom="5" height="26">

		<s:Rect left="1" right="1" height="100%">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="0xFFFFFF"/>
					<s:GradientEntry color="0xDADADA"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		<s:Group id="clickGroup" buttonMode="true" height="26" width="100%"
				 click="clickGroup_clickHandler(event)" filters="{dropShadowFilter}">
			<s:Rect id="backRect" width="100%" height="100%" radiusX="3">
				<s:fill>
					<s:LinearGradient id="gradientButton" rotation="90">
						<s:GradientEntry color="0xFFFFFF"/>
						<s:GradientEntry color="0xDADADA"/>
					</s:LinearGradient>
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke id="stroke2" color="#ffffff" weight="1"/>
				</s:stroke>
			</s:Rect>
			<s:HGroup id="subGroup" width="100%" paddingLeft="7" paddingRight="10" verticalCenter="0" verticalAlign="middle" gap="3">
				<s:Label fontSize="13" text="Available Simulators" fontWeight="bold"
						 filters="{RunningDeviceRenderer.dropShadowFilterMiddle}"/>
			</s:HGroup>
		</s:Group>
		<s:Label fontStyle="italic" fontSize="11" top="36"
				 text="{simulators.info}" paddingLeft="5"/>
		<s:List width="100%" top="26" bottom="0"
				alternatingItemColors="[#efefef, #dedede]" borderVisible="false"
				contentBackgroundAlpha="0.0" dataProvider="{simulators.collection}"
				itemRenderer="renderer.SimulatorDeviceRenderer" useVirtualLayout="false"/>
	</s:Group>
		
</s:WindowedApplication>