<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   showStatusBar="false" frameRate="60"
					   creationComplete="creationCompleteHandler(event)"
					   closing="closeHandler(event)" backgroundColor="0xefefef">
	<fx:Script>
		<![CDATA[
			import com.ats.device.Device;
			import com.ats.device.running.IosDevice;
			import com.ats.device.running.RunningDevice;
			import com.ats.gui.panel.SettingsWindow;
			import com.ats.gui.renderer.RunningDeviceRenderer;
			import com.ats.helpers.Settings;
			import com.ats.servers.HttpServer;
			import com.ats.tools.PeerGroupConnection;
			import com.greensock.TweenMax;
			
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import flash.filters.BitmapFilterQuality;
			import spark.components.Alert;
			import spark.filters.DropShadowFilter;
			
			public static const dropShadowFilter:DropShadowFilter = new DropShadowFilter(2.0, 45, 0x000000, 0.1, 10.0, 10.0, 0.9, BitmapFilterQuality.HIGH, false, false, false);
			
			public static const isMacOs:Boolean = Capabilities.os.indexOf("Mac") > -1;
			
			private var icon:Loader = new Loader();
			private var iconMenu:NativeMenu = new NativeMenu();
			
			[Bindable]
			private var settings:Settings = Settings.getInstance()
			
			public var peerGroup:PeerGroupConnection;
			
			[Bindable]
			public var genymotionManager:GenymotionManager;
			
			[Bindable]
			private var httpPort:int = 8686;
			
			[Bindable]
			public var devices:RunningDevicesManager;
			
			[Bindable]
			public var simulators:AvailableSimulatorsManager;
			
			private var httpServer:HttpServer = HttpServer.getInstance()
			
			public var teamId:String;
			
			private static const workFolder:File = File.userDirectory.resolvePath(".atsmobilestation");
			private var workAdbFolder:File;
			
			public function get logsFolder():File {
				return workFolder.resolvePath("logs");
			}
			
			public function get devicesSettingsFile():File {
				return File.userDirectory.resolvePath(".actiontestscript/mobilestation/settings/devicesSettings.txt");
			}
			
			public function get devicePortSettingsFile():File {
				return File.userDirectory.resolvePath(".actiontestscript/mobilestation/settings/portSettings.txt");
			}
			
			public function get settingsFile():File {
				return File.userDirectory.resolvePath(".actiontestscript/mobilestation/settings/settings.txt");
			}

			public function get adbFile():File {
				var execExtension:String = Capabilities.os.indexOf("Mac")>-1?"":".exe";
				return File.applicationDirectory.resolvePath("assets/tools/android/adb" + execExtension);
			}
			
			public function getTeamId():String {
				return teamId;
			}
			
			public function setTeamId(value:String):void {
				teamId = value;
			}
			
			private function iconLoadComplete(event:Event):void {
				NativeApplication.nativeApplication.icon.bitmaps = [event.target.content.bitmapData];
			}
			
			private function trayClick(ev:ScreenMouseEvent):void {
				nativeWindow.restore();
				NativeApplication.nativeApplication.activate()
			}
			
			private function restartApp(ev:Event = null):void {
				var execFilePath:String = "AtsMobileStation.";
				if (isMacOs) {
					execFilePath += "app";
				} else {
					execFilePath += "exe";
				}
				
				const execFile:File = File.applicationDirectory.resolvePath(execFilePath);
				if (execFile.exists) {
					NativeApplication.nativeApplication.exit();
					execFile.openWithDefaultApplication();
				}
			}
			
			private function exitAppHandler(ev:Event):void {
				NativeApplication.nativeApplication.icon.bitmaps = [];
				NativeApplication.nativeApplication.exit();
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				
				var appXml:XML = NativeApplication.nativeApplication.applicationDescriptor;
				var ns:Namespace = NativeApplication.nativeApplication.applicationDescriptor.namespace();
				const appVersion:String = appXml.ns::versionNumber[0];
				//appName = appXml.ns::filename[0];
				System.disposeXML(appXml);
				
				title = "Ats MobileStation (" + appVersion + ") - port:" + httpPort
				
				var exitCommand:NativeMenuItem = iconMenu.addItem(new NativeMenuItem("Exit"));
				exitCommand.addEventListener(Event.SELECT, exitAppHandler, false, 0, true);
				
				var restartCommand:NativeMenuItem = iconMenu.addItem(new NativeMenuItem("Restart"));
				restartCommand.addEventListener(Event.SELECT, restartApp, false, 0, true);
				
				if (NativeApplication.supportsSystemTrayIcon) {
					icon.contentLoaderInfo.addEventListener(Event.COMPLETE, iconLoadComplete);
					icon.load(new URLRequest("assets/icons/16/ats_logo.png"));
					
					var systray:SystemTrayIcon = NativeApplication.nativeApplication.icon as SystemTrayIcon;
					systray.tooltip = "ATS Mobile Station";
					systray.menu = iconMenu;
					systray.addEventListener(ScreenMouseEvent.CLICK, trayClick);
				}
				
				if (NativeApplication.supportsDockIcon) {
					icon.contentLoaderInfo.addEventListener(Event.COMPLETE, iconLoadComplete);
					icon.load(new URLRequest("assets/icons/32/ats_logo.png"));
					var dock:DockIcon = NativeApplication.nativeApplication.icon as DockIcon;
					dock.menu = iconMenu;
				}
				
				try {
					logsFolder.deleteDirectory(true);
				} catch (err:IOError) {
				}
				
				/* *** */
				// files corrupted
				var date:Date = new Date(2020, 2, 31, 18, 30, 0, 0);
				if (devicePortSettingsFile.exists && devicePortSettingsFile.modificationDate < date) {
					devicePortSettingsFile.deleteFile();
				}
				
				if (devicesSettingsFile.exists && devicesSettingsFile.modificationDate < date) {
					devicesSettingsFile.deleteFile();
				}
				/* *** */
				
				
				if (!Capabilities.isDebugger) {
					cleanDirectory(File.userDirectory.resolvePath("Library/mobileStationTemp"));
				}
				
				//workAdbFolder = workFolder.resolvePath("adb");
				//File.applicationDirectory.resolvePath("assets/tools/android").copyTo(workAdbFolder, true)
					
				workAdbFolder = File.applicationDirectory.resolvePath("assets/tools/android");
									
				simulators = new AvailableSimulatorsManager();
				devices = new RunningDevicesManager(isMacOs, workAdbFolder);
				
				if (isMacOs) {
					var file:File = settingsFile;
					if (file.exists) {
						
						var fileStream:FileStream = new FileStream();
						fileStream.open(file, FileMode.READ);
						
						var settingsContent:String = fileStream.readUTFBytes(fileStream.bytesAvailable);
						var settingsContentArray:Array = settingsContent.split("\n");
						
						for each(var setting:String in settingsContentArray) {
							if (setting != "") {
								var key:String = setting.split("==")[0];
								if (key == "development_team") {
									teamId = setting.split("==")[1];
									break;
								}
							}
						}
						fileStream.close();
					}
				}
				
				//httpServer.listen(10000, handleHttpServerError);
				peerGroup = new PeerGroupConnection(workFolder, devices, simulators, httpPort);
				genymotionManager = new GenymotionManager();
			}
			
			public function saveValues(desc:String, name:String):void {
				peerGroup.saveValues(desc, name);
			}
			
			private function handleHttpServerError(e:Error):void {
				trace("HTTP Server Error : " + e)
			}
			
			public function restartDevice(dev:Device):void {
				devices.restartDev(dev);
			}
			
			public function restartIosDevices():void {
				for each(var dv:RunningDevice in devices.collection) {
					if (!dv.simulator && dv is IosDevice && dv.status != Device.READY) {
						devices.restartDev(dv);
					}
				}
			}
			
			protected function closeHandler(event:Event):void {
				event.preventDefault();
				event.stopPropagation();
				
				peerGroup.close();
				
				devices.terminate();
				simulators.terminate();
				
				infoStatus.text = "Please wait all processes to finish ..."
				TweenMax.delayedCall(2.00, closeApp);
			}
			
			private function closeApp():void {
				NativeApplication.nativeApplication.exit(0);
			}
			
			protected function cleanDirectory(directory:File):void {
				if (directory.isDirectory) {
					var dirArray:Array = [];
					var files:Array = directory.getDirectoryListing();
					for (var i:int = 0; i < files.length; i++) {
						if (files[i].isDirectory && files[i].nativePath.indexOf("driver_") > -1) {
							dirArray.push(files[i]);
						}
					}
					
					for each(var d:File in dirArray) {
						d.deleteDirectory(true);
					}
				}
			}
			
			protected function clickGroup_clickHandler(event:MouseEvent):void {
				if (simulatorsGroup.height == 26) {
					TweenMax.to(simulatorsGroup, 0.3, {height: height - 62})
					TweenMax.to(genymotionGroup, 0.3, {height: 26})
					TweenMax.to(connectedGroup, 0.3, {height: 26})
				}
			}
			
			protected function clickGroup2_clickHandler(event:MouseEvent):void {
				if (genymotionGroup.height == 26) {
					TweenMax.to(genymotionGroup, 0.3, {height: height - 62})
					TweenMax.to(simulatorsGroup, 0.3, {height: 26})
					TweenMax.to(connectedGroup, 0.3, {height: 26})
				}
			}
			
			protected function clickConnected_clickHandler(event:MouseEvent):void {
				if (connectedGroup.height == 26) {
					TweenMax.to(connectedGroup, 0.3, {height: height - 62})
					TweenMax.to(genymotionGroup, 0.3, {height: 26})
					TweenMax.to(simulatorsGroup, 0.3, {height: 26})
				}
			}
			
			protected function settings_clickHandler(event:MouseEvent):void {
				// create and configure the TitleWindow
				const tw:SettingsWindow = new SettingsWindow();
				for each(var dv:RunningDevice in devices.collection) {
					if (!dv.simulator && dv is IosDevice) {
						tw.devices.push(dv);
					}
				}
				
				// open the TitleWindow as a modal popup window
				PopUpManager.addPopUp(tw, this, true);
				PopUpManager.centerPopUp(tw);
			}
			
			public function restartServer():void {
				Alert.show("Dou you really want to restart the server ?\n(connected clients will be deconnected)", "Restart MobileStation server", Alert.YES | Alert.NO, this, alertClickHandler);
			}
			
			private function alertClickHandler(evt:CloseEvent):void {
				if (evt.detail == Alert.YES) {
					peerGroup.terminate();
					restartApp();
				}
			}
			
			protected function reloadButtons_clickHandler(event:MouseEvent):void {
				genymotionManager.loadRecipesList();
				genymotionManager.loadInstancesList();
			}
		]]>
	</fx:Script>
	
	<s:VGroup bottom="5" left="5" right="5" top="5" gap="1">
		<s:Group id="connectedGroup" buttonMode="true" height="100%" width="100%" filters="{dropShadowFilter}"
				 clipAndEnableScrolling="true">
			<s:Group height="26" click="clickConnected_clickHandler(event)" width="100%"
					 rollOut="settingsButton.alpha=0.5" rollOver="settingsButton.alpha=1.0">
				<s:Rect width="100%" height="100%" radiusX="3">
					<s:fill>
						<s:LinearGradient rotation="90">
							<s:GradientEntry color="0xFFFFFF"/>
							<s:GradientEntry color="0xDADADA"/>
						</s:LinearGradient>
					</s:fill>
					<s:stroke>
						<s:SolidColorStroke color="#ffffff" weight="1"/>
					</s:stroke>
				</s:Rect>
				<s:HGroup width="100%" paddingLeft="7" paddingRight="5" verticalCenter="0" verticalAlign="middle" gap="3">
					<s:Label fontSize="13" text="Connected Devices" fontWeight="bold"/>
					<s:Spacer width="100%"/>
					<s:Group id="settingsButton" visible="true" alpha="0.5" buttonMode="true" click="settings_clickHandler(event)"
							 height="20" width="20">
						<s:BitmapImage source="assets/icons/20/settings.png" smooth="true" smoothingQuality="high"/>
					</s:Group>
				</s:HGroup>
			</s:Group>
			
			<s:VGroup top="28" left="6" right="6" bottom="30" gap="3">
				<s:VGroup filters="{RunningDeviceRenderer.dropShadowFilterMiddle}" gap="3" paddingTop="12" paddingLeft="2" paddingRight="2"
						  visible="{devices.collection.length==0}" includeInLayout="{devices.collection.length==0}">
					<s:Label fontWeight="bold" 
							 text="No devices found"/>
					<s:Label id="infoStatus" fontStyle="italic" fontSize="11"
							 text="(Connect devices with usb cable to this station)"/>
				</s:VGroup>
				
				<s:Spacer height="4"/>
				<s:List width="100%" height="100%"
						alternatingItemColors="[#efefef, #dedede]" borderVisible="false"
						contentBackgroundAlpha="0.0" dataProvider="{devices.collection}"
						itemRenderer="com.ats.gui.renderer.RunningDeviceRenderer" useVirtualLayout="false"/>
			</s:VGroup>
		</s:Group>
		
		<s:Group id="simulatorsGroup" height="26" width="100%" clipAndEnableScrolling="true">
			
			<s:Rect left="1" right="1" height="100%">
				<s:fill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="0xFFFFFF"/>
						<s:GradientEntry color="0xDADADA"/>
					</s:LinearGradient>
				</s:fill>
			</s:Rect>
			<s:Group id="clickGroup" buttonMode="true" height="26" width="100%"
					 click="clickGroup_clickHandler(event)" filters="{dropShadowFilter}">
				<s:Rect id="backRect" width="100%" height="100%" radiusX="3">
					<s:fill>
						<s:LinearGradient id="gradientButton" rotation="90">
							<s:GradientEntry color="0xFFFFFF"/>
							<s:GradientEntry color="0xDADADA"/>
						</s:LinearGradient>
					</s:fill>
					<s:stroke>
						<s:SolidColorStroke id="stroke2" color="#ffffff" weight="1"/>
					</s:stroke>
				</s:Rect>
				<s:HGroup id="subGroup" width="100%" paddingLeft="7" paddingRight="10" verticalCenter="0" verticalAlign="middle" gap="3">
					<s:Label fontSize="13" text="Available Simulators" fontWeight="bold"
							 filters="{RunningDeviceRenderer.dropShadowFilterMiddle}"/>
				</s:HGroup>
			</s:Group>
			<s:Label fontStyle="italic" fontSize="11" top="36"
					 text="{simulators.info}" paddingLeft="5"/>
			<s:List width="100%" top="28" bottom="0"
					alternatingItemColors="[#efefef, #dedede]" borderVisible="false"
					contentBackgroundAlpha="0.0" dataProvider="{simulators.collection}"
					itemRenderer="com.ats.gui.renderer.SimulatorDeviceRenderer" useVirtualLayout="false"/>
		</s:Group>
		
		<s:Group id="genymotionGroup" width="100%" height="26" clipAndEnableScrolling="true">
			
			<s:Group height="26" width="100%">
				
				<s:Rect left="1" right="1" height="100%">
					<s:fill>
						<s:LinearGradient rotation="90">
							<s:GradientEntry color="0xFFFFFF"/>
							<s:GradientEntry color="0xDADADA"/>
						</s:LinearGradient>
					</s:fill>
				</s:Rect>
				<s:Group buttonMode="true" height="26" width="100%"
						 click="clickGroup2_clickHandler(event)" filters="{dropShadowFilter}">
					<s:Rect width="100%" height="100%" radiusX="3">
						<s:fill>
							<s:LinearGradient rotation="90">
								<s:GradientEntry color="0xFFFFFF"/>
								<s:GradientEntry color="0xDADADA"/>
							</s:LinearGradient>
						</s:fill>
						<s:stroke>
							<s:SolidColorStroke color="#ffffff" weight="1"/>
						</s:stroke>
					</s:Rect>
					<s:HGroup width="100%" paddingLeft="7" paddingRight="7" verticalCenter="0" verticalAlign="middle" gap="3">
						<s:Label fontSize="13" text="Genymotion Simulators" fontWeight="bold"
								 filters="{RunningDeviceRenderer.dropShadowFilterMiddle}" width="100%"/>
						<s:Group id="reloadButtons" visible="true" alpha="0.4" buttonMode="true" click="reloadButtons_clickHandler(event)"
								 height="20" width="20">
							<s:BitmapImage source="assets/icons/20/reload.png" smooth="true" smoothingQuality="high"/>
						</s:Group>
					</s:HGroup>
				</s:Group>
			</s:Group>
			
			<s:Label fontStyle="italic" fontSize="11" top="36"
					 text="---" paddingLeft="5"/>
			<s:List width="100%" top="28" bottom="0"
					alternatingItemColors="[#efefef, #dedede]" borderVisible="false"
					contentBackgroundAlpha="0.0" dataProvider="{genymotionManager.recipes}"
					itemRenderer="com.ats.gui.renderer.GenymotionTemplateDeviceRenderer" useVirtualLayout="false"/>
		</s:Group>
	</s:VGroup>
</s:WindowedApplication>