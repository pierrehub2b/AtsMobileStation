<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   showStatusBar="false" frameRate="60"
					   creationComplete="creationCompleteHandler(event)"
					   closing="closeHandler(event)" backgroundColor="0xefefef"
					   title="Ats MobileStation (port:{httpPort})">
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenMax;
			
			import device.Device;
			import device.RunningDevice;
			import device.running.IosDevice;
			
			import flash.filters.BitmapFilterQuality;
			
			import mx.controls.Text;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import renderer.PhysicialDeviceSettingsWindow;
			import renderer.RunningDeviceRenderer;
			
			import servers.http.HttpServer;
			
			import spark.components.Alert;
			import spark.filters.DropShadowFilter;
			
			import tools.PeerGroupConnection;
			
			public static const dropShadowFilter:DropShadowFilter = new DropShadowFilter(2.0, 45, 0x000000, 0.1, 10.0, 10.0, 0.9, BitmapFilterQuality.HIGH, false, false, false);
			
			public static const isMacOs:Boolean = Capabilities.os.indexOf("Mac") > -1;
			
			private var icon:Loader = new Loader(); 
			private var iconMenu:NativeMenu = new NativeMenu(); 
			
			public var peerGroup:PeerGroupConnection;
			
			[Bindable]
			private var httpPort:int = 8686;
			
			[Bindable]
			public var devices:RunningDevicesManager;
			
			[Bindable]
			public var simulators:AvailableSimulatorsManager;
			
			private var httpServer:HttpServer = HttpServer.getInstance()
			
			public var teamId:String;

			public function get logsFolder():File {
				return File.userDirectory.resolvePath(".actiontestscript/mobilestation/logs");
			}
			
			public function get devicesSettingsFile():File {
				return File.userDirectory.resolvePath(".actiontestscript/mobilestation/settings/devicesSettings.txt");
			}
			
			public function get devicePortSettingsFile():File {
				return File.userDirectory.resolvePath(".actiontestscript/mobilestation/settings/portSettings.txt");
			}
			
			public function get settingsFile():File {
				return File.userDirectory.resolvePath(".actiontestscript/mobilestation/settings/settings.txt");
			}
			
			public function getTeamId():String {
				return teamId;
			}
			
			public function setTeamId(value:String):void {
				teamId = value;
			}
						
			private function iconLoadComplete(event:Event):void 
			{ 
				NativeApplication.nativeApplication.icon.bitmaps = [event.target.content.bitmapData]; 
			} 
			
			private function trayClick(ev:ScreenMouseEvent):void{
				nativeWindow.restore();
				NativeApplication.nativeApplication.activate()
			}
			
			private function restartApp(ev:Event=null):void{
				var execFilePath:String = "AtsMobileStation.";
				if(isMacOs){
					execFilePath += "app";
				}else{
					execFilePath += "exe";
				}
				
				const execFile:File = File.applicationDirectory.resolvePath(execFilePath);
				if(execFile.exists){
					NativeApplication.nativeApplication.exit();
					execFile.openWithDefaultApplication();
				}
			}
			
			private function exitAppHandler(ev:Event):void{
				NativeApplication.nativeApplication.icon.bitmaps = []; 
				NativeApplication.nativeApplication.exit(); 
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				
				var exitCommand:NativeMenuItem = iconMenu.addItem(new NativeMenuItem("Exit")); 
				exitCommand.addEventListener(Event.SELECT, exitAppHandler, false, 0, true);
				
				var restartCommand:NativeMenuItem = iconMenu.addItem(new NativeMenuItem("Restart")); 
				restartCommand.addEventListener(Event.SELECT, restartApp, false, 0, true);
				
				if (NativeApplication.supportsSystemTrayIcon){
					icon.contentLoaderInfo.addEventListener(Event.COMPLETE, iconLoadComplete); 
					icon.load(new URLRequest("assets/icons/16/ats_logo.png")); 
					
					var systray:SystemTrayIcon = NativeApplication.nativeApplication.icon as SystemTrayIcon; 
					systray.tooltip = "ATS Mobile Station"; 
					systray.menu = iconMenu; 
					systray.addEventListener(ScreenMouseEvent.CLICK, trayClick);
				}
								
				if (NativeApplication.supportsDockIcon){ 
					icon.contentLoaderInfo.addEventListener(Event.COMPLETE,iconLoadComplete); 
					icon.load(new URLRequest("assets/icons/32/ats_logo.png")); 
					var dock:DockIcon = NativeApplication.nativeApplication.icon as DockIcon;  
					dock.menu = iconMenu; 
				} 
				
				try {
					logsFolder.deleteDirectory(true);
				} catch (err:IOError) {
				}
				
				/* *** */
				// files corrupted
				var date:Date = new Date(2020, 2, 31, 18, 30, 0, 0);
				if (devicePortSettingsFile.exists && devicePortSettingsFile.modificationDate < date) {
					devicePortSettingsFile.deleteFile();
				}
				
				if (devicesSettingsFile.exists && devicesSettingsFile.modificationDate < date) {
					devicesSettingsFile.deleteFile();
				}
				/* *** */
				
				
				if (!Capabilities.isDebugger) {
					cleanDirectory(File.userDirectory.resolvePath("Library/mobileStationTemp"));
				}
				
				simulators = new AvailableSimulatorsManager();
				devices = RunningDevicesManager.getInstance();
				
				if (isMacOs) {
					var file:File = FlexGlobals.topLevelApplication.settingsFile;
					if (file.exists) {
						
						var fileStream:FileStream = new FileStream();
						fileStream.open(file, FileMode.READ);
						
						var settingsContent:String = fileStream.readUTFBytes(fileStream.bytesAvailable);
						var settingsContentArray:Array = settingsContent.split("\n");
						
						for each(var setting:String in settingsContentArray) {
							if (setting != "") {
								var key:String = setting.split("==")[0];
								if (key == "development_team") {
									teamId = setting.split("==")[1];
									break;
								}
							}
						}
						fileStream.close();
					}
				}
				
				// httpServer.listen(8080, handleHttpServerError);
				peerGroup = new PeerGroupConnection(devices, simulators, httpPort);
			}
			
			public function saveValues(desc:String, name:String):void {
				peerGroup.saveValues(desc, name);
			}
			
			private function handleHttpServerError(e:Error):void {
				trace("HTTP Server Error : " + e)
			}
			
			public function restartDevice(dev:Device):void {
				devices.restartDev(dev);
			}
			
			public function restartIosDevices():void {
				for each(var dv:RunningDevice in devices.collection) {
					if (!dv.simulator && dv is IosDevice && dv.status != Device.READY) {
						devices.restartDev(dv);
					}
				}
			}
			
			protected function closeHandler(event:Event):void {
				event.preventDefault();
				event.stopPropagation();
				
				devices.terminate();
				simulators.terminate();
				peerGroup.close();
				
				infoStatus.text = "Please wait all processes to finish ..."
				TweenMax.delayedCall(5.00, closeApp);
			}
			
			private function closeApp():void{
				NativeApplication.nativeApplication.exit(0);
			}
			
			protected function cleanDirectory(directory:File):void {
				if (directory.isDirectory) {
					var dirArray:Array = [];
					var files:Array = directory.getDirectoryListing();
					for (var i:int = 0; i < files.length; i++) {
						if (files[i].isDirectory && files[i].nativePath.indexOf("driver_") > -1) {
							dirArray.push(files[i]);
						}
					}
					
					for each(var d:File in dirArray) {
						d.deleteDirectory(true);
					}
				}
			}
			
			protected function clickGroup_clickHandler(event:MouseEvent):void {
				if (simulatorsGroup.height == 26) {
					TweenMax.to(simulatorsGroup, 0.3, {height: height - 38})
				} else {
					TweenMax.to(simulatorsGroup, 0.3, {height: 26})
				}
			}
			
			protected function clickConnected_clickHandler(event:MouseEvent):void {
				if (simulatorsGroup.height != 26) {
					TweenMax.to(simulatorsGroup, 0.3, {height: 26})
				}
			}
			
			protected function settings_clickHandler(event:MouseEvent):void {
				// create and configure the TitleWindow
				const tw:PhysicialDeviceSettingsWindow = new PhysicialDeviceSettingsWindow();
				for each(var dv:RunningDevice in devices.collection) {
					if (!dv.simulator && dv is IosDevice) {
						tw.devices.push(dv);
					}
				}

				// open the TitleWindow as a modal popup window
				PopUpManager.addPopUp(tw, this, true);
				PopUpManager.centerPopUp(tw);
			}
			
			public function restartServer():void{
				Alert.show("Dou you really want to restart the server ?\n(connected clients will be deconnected)", "Restart MobileStation server", Alert.YES|Alert.NO, this, alertClickHandler);
			}
			
			private function alertClickHandler(evt:CloseEvent):void {
				if (evt.detail == Alert.YES) {
					peerGroup.terminate();
					restartApp();
				}
			}
		]]>
	</fx:Script>
	
	<s:Group id="clickConnected" buttonMode="true" height="26" left="5" right="5" top="5"
			 click="clickConnected_clickHandler(event)" filters="{dropShadowFilter}"
			 rollOut="settingsButton.alpha=0.5" rollOver="settingsButton.alpha=1.0">
		<s:Rect width="100%" height="100%" radiusX="3">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="0xFFFFFF"/>
					<s:GradientEntry color="0xDADADA"/>
				</s:LinearGradient>
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke color="#ffffff" weight="1"/>
			</s:stroke>
		</s:Rect>
		<s:HGroup width="100%" paddingLeft="7" paddingRight="5" verticalCenter="0" verticalAlign="middle" gap="3">
			<s:Label fontSize="13" text="Connected Devices" fontWeight="bold"/>
			<s:Spacer width="100%"/>
			<s:Group id="settingsButton" visible="true" alpha="0.5" buttonMode="true" click="settings_clickHandler(event)"
					 height="20" width="20">
				<s:BitmapImage source="assets/icons/20/settings.png" smooth="true" smoothingQuality="high"/>
			</s:Group>
		</s:HGroup>
	</s:Group>
	
	<s:VGroup top="26" left="6" right="6" bottom="30" gap="3">
		<s:VGroup filters="{RunningDeviceRenderer.dropShadowFilterMiddle}" gap="3" paddingTop="12" paddingLeft="2" paddingRight="2"
				  visible="{devices.collection.length==0}" includeInLayout="{devices.collection.length==0}">
			<s:Label fontWeight="bold" 
					 text="No devices found"/>
			<s:Label id="infoStatus" fontStyle="italic" fontSize="11"
					 text="(Connect devices with usb cable to this station)"/>
		</s:VGroup>
		
		<s:Spacer height="4"/>
		<s:List width="100%" height="100%"
				alternatingItemColors="[#efefef, #dedede]" borderVisible="false"
				contentBackgroundAlpha="0.0" dataProvider="{devices.collection}"
				itemRenderer="renderer.RunningDeviceRenderer" useVirtualLayout="false"/>
	</s:VGroup>
	
	<s:Group id="simulatorsGroup" left="5" right="5" bottom="5" height="26">
		
		<s:Rect left="1" right="1" height="100%">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="0xFFFFFF"/>
					<s:GradientEntry color="0xDADADA"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		<s:Group id="clickGroup" buttonMode="true" height="26" width="100%"
				 click="clickGroup_clickHandler(event)" filters="{dropShadowFilter}">
			<s:Rect id="backRect" width="100%" height="100%" radiusX="3">
				<s:fill>
					<s:LinearGradient id="gradientButton" rotation="90">
						<s:GradientEntry color="0xFFFFFF"/>
						<s:GradientEntry color="0xDADADA"/>
					</s:LinearGradient>
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke id="stroke2" color="#ffffff" weight="1"/>
				</s:stroke>
			</s:Rect>
			<s:HGroup id="subGroup" width="100%" paddingLeft="7" paddingRight="10" verticalCenter="0" verticalAlign="middle" gap="3">
				<s:Label fontSize="13" text="Available Simulators" fontWeight="bold"
						 filters="{RunningDeviceRenderer.dropShadowFilterMiddle}"/>
			</s:HGroup>
		</s:Group>
		<s:Label fontStyle="italic" fontSize="11" top="36"
				 text="{simulators.info}" paddingLeft="5"/>
		<s:List width="100%" top="26" bottom="0"
				alternatingItemColors="[#efefef, #dedede]" borderVisible="false"
				contentBackgroundAlpha="0.0" dataProvider="{simulators.collection}"
				itemRenderer="renderer.SimulatorDeviceRenderer" useVirtualLayout="false"/>
	</s:Group>
</s:WindowedApplication>