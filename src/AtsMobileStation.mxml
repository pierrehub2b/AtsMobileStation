<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   showStatusBar="false" frameRate="60"
					   creationComplete="creationCompleteHandler(event)"
					   backgroundAlpha="0.0"
					   xmlns:panels="com.caipture.gui.panels.*" 
					   xmlns:buttons="com.caipture.gui.buttons.*">
	<fx:Script>
		<![CDATA[
		import com.ats.device.Device;
		import com.ats.device.running.IosDevice;
		import com.ats.device.running.RunningDevice;
		import com.ats.device.simulator.genymotion.GenymotionSaasSimulator;
		import com.ats.gui.alert.QuitApplicationAlert;
		import com.ats.gui.panel.SettingsForm;
		import com.ats.gui.renderer.RunningDeviceRenderer;
		import com.ats.helpers.Settings;
		import com.ats.helpers.Version;
		import com.ats.managers.AvailableSimulatorsManager;
		import com.ats.managers.GenymotionManager;
		import com.ats.managers.RunningDevicesManager;
		import com.ats.managers.gmsaas.GmsaasProcess;
		import com.ats.tools.PeerGroupConnection;
		import com.ats.tools.Python;
		import com.caipture.gui.panels.TopTitle;
		import com.greensock.TweenLite;
		import com.greensock.TweenMax;
		import com.greensock.plugins.ColorTransformPlugin;
		import com.greensock.plugins.TweenPlugin;

		import mx.events.CloseEvent;
		import mx.events.FlexEvent;

		import spark.components.Alert;
		import spark.filters.DropShadowFilter;

		import flash.filters.BitmapFilterQuality;

		public static const dropShadowFilterApp:DropShadowFilter = new DropShadowFilter(4.0, 45, 0x000000, 0.4, 8.0, 8.0, 0.9, BitmapFilterQuality.HIGH, false, false, false);
		public static const dropShadowFilter:DropShadowFilter = new DropShadowFilter(2.0, 90, 0x000000, 0.4, 8.0, 8.0, 0.9, BitmapFilterQuality.HIGH, false, false, false);

		public static const supportedAndroidOsVersion:Version = new Version("5.1")

		private var icon:Loader = new Loader();
		private var iconMenu:NativeMenu = new NativeMenu();

		[Bindable]
		private var settingsForm:SettingsForm;

		public var peerGroup:PeerGroupConnection;

		public var python:Python;

		[Bindable]
		public var genymotionManager:GenymotionManager;

		[Bindable]
		private var httpPort:int = 8686;

		[Bindable]
		public var devices:RunningDevicesManager;

		[Bindable]
		public var simulators:AvailableSimulatorsManager;

		public var teamId:String;

		public function getTeamId():String {
			return teamId;
		}

		public function setTeamId(value:String):void {
			teamId = value;
		}

		private function iconLoadComplete(event:Event):void {
			NativeApplication.nativeApplication.icon.bitmaps = [event.target.content.bitmapData];
		}

		private function trayClick(ev:ScreenMouseEvent):void {
			nativeWindow.restore();
			NativeApplication.nativeApplication.activate()
		}

		private function restartApp(ev:Event = null):void {
			var execFilePath:String = "AtsMobileStation.";
			if (Settings.isMacOs) {
				execFilePath += "app";
			} else {
				execFilePath += "exe";
			}

			const execFile:File = File.applicationDirectory.resolvePath(execFilePath);
			if (execFile.exists) {
				NativeApplication.nativeApplication.exit();
				execFile.openWithDefaultApplication();
			}
		}

		private function exitAppHandler(ev:Event):void {
			NativeApplication.nativeApplication.icon.bitmaps = [];
			NativeApplication.nativeApplication.exit();
		}

		protected function creationCompleteHandler(event:FlexEvent):void {

			TweenPlugin.activate([ColorTransformPlugin]);

			var appXml:XML = NativeApplication.nativeApplication.applicationDescriptor;
			var ns:Namespace = NativeApplication.nativeApplication.applicationDescriptor.namespace();
			const appVersion:String = appXml.ns::versionNumber[0];
			//appName = appXml.ns::filename[0];
			System.disposeXML(appXml);

			titleLabel.text = "Ats MobileStation (" + appVersion + ") - port:" + httpPort

			var exitCommand:NativeMenuItem = iconMenu.addItem(new NativeMenuItem("Exit"));
			exitCommand.addEventListener(Event.SELECT, exitAppHandler, false, 0, true);

			var restartCommand:NativeMenuItem = iconMenu.addItem(new NativeMenuItem("Restart"));
			restartCommand.addEventListener(Event.SELECT, restartApp, false, 0, true);

			if (NativeApplication.supportsSystemTrayIcon) {
				icon.contentLoaderInfo.addEventListener(Event.COMPLETE, iconLoadComplete);
				icon.load(new URLRequest("assets/icons/16/ats_logo.png"));

				var systray:SystemTrayIcon = NativeApplication.nativeApplication.icon as SystemTrayIcon;
				systray.tooltip = "ATS Mobile Station";
				systray.menu = iconMenu;
				systray.addEventListener(ScreenMouseEvent.CLICK, trayClick);
			}

			if (NativeApplication.supportsDockIcon) {
				icon.contentLoaderInfo.addEventListener(Event.COMPLETE, iconLoadComplete);
				icon.load(new URLRequest("assets/icons/32/ats_logo.png"));
				var dock:DockIcon = NativeApplication.nativeApplication.icon as DockIcon;
				dock.menu = iconMenu;
			}

			Settings.cleanLogs();

			if (!Capabilities.isDebugger) {
				cleanDirectory(File.userDirectory.resolvePath("Library/mobileStationTemp"));
			}

			simulators = new AvailableSimulatorsManager();
			devices = new RunningDevicesManager();

			if (Settings.isMacOs) {
				var file:File = Settings.settingsFile;
				if (file.exists) {

					var fileStream:FileStream = new FileStream();
					fileStream.open(file, FileMode.READ);

					var settingsContent:String = fileStream.readUTFBytes(fileStream.bytesAvailable);
					var settingsContentArray:Array = settingsContent.split("\n");

					for each(var setting:String in settingsContentArray) {
						if (setting != "") {
							var key:String = setting.split("==")[0];
							if (key == "development_team") {
								teamId = setting.split("==")[1];
								break;
							}
						}
					}
					fileStream.close();
				}
			}

			peerGroup = new PeerGroupConnection(Settings.workFolder, devices, httpPort);
			peerGroup.addEventListener(Event.INIT, monaServerInitHandler)
			peerGroup.start()

			python = new Python(Settings.workFolder);
			python.addEventListener(Event.COMPLETE, pythonCheckComplete);
			python.install();
		}

		private function monaServerInitHandler(event:Event):void {
			(event.currentTarget as PeerGroupConnection).removeEventListener(Event.INIT, monaServerInitHandler)
			if(GmsaasProcess.gmsaasExec != null){
				genymotionManager.fetchContent();
			}
		}

		private function pythonCheckComplete(ev:Event):void {
			python.removeEventListener(Event.COMPLETE, pythonCheckComplete);
			genymotionManager = new GenymotionManager();
		}

		public function saveValues(desc:String, name:String):void {
			peerGroup.saveValues(desc, name);
		}

		public function restartDevice(dev:Device):void {
			devices.restartDev(dev);
		}

		public function restartIosDevices():void {
			for each(var dv:RunningDevice in devices.collection) {
				if (!dv.simulator && dv is IosDevice && dv.status != Device.READY) {
					devices.restartDev(dv);
				}
			}
		}

		protected function closeButtonClicked(event:MouseEvent):void {
			var quit:QuitApplicationAlert = new QuitApplicationAlert();
			quit.addEventListener(QuitApplicationAlert.OK, quitApplicationHandler, false, 0, true);
			ModalPopupManager.addPopup(mainGroup, quit);
		}

		private function quitApplicationHandler(ev:Event):void {
			TweenMax.delayedCall(0.1, closeAll);
		}

		private function closeAll():void {
			peerGroup.close();
			simulators.terminate();

			genymotionManager.addEventListener(Event.COMPLETE, genymotionTerminated);
			genymotionManager.terminate()
		}

		private function genymotionTerminated(ev:Event):void {
			devices.addEventListener(Event.COMPLETE, devicesTerminateComplete);
			devices.terminate();
		}

		private function devicesTerminateComplete(ev:Event):void {
			TweenMax.delayedCall(5.00, closeApp);
		}

		private function closeApp():void {
			NativeApplication.nativeApplication.exit(0);
		}

		protected function cleanDirectory(directory:File):void {
			if (directory.isDirectory) {
				var dirArray:Array = [];
				var files:Array = directory.getDirectoryListing();
				for (var i:int = 0; i < files.length; i++) {
					if (files[i].isDirectory && files[i].nativePath.indexOf("driver_") > -1) {
						dirArray.push(files[i]);
					}
				}

				for each(var d:File in dirArray) {
					d.deleteDirectory(true);
				}
			}
		}

		protected function clickGroup_clickHandler(event:MouseEvent):void {
			if (simulatorsGroup.height == 26) {
				var newHeight:Object = {height: height - 96};
				if (genymotionManager != null && genymotionManager.visible) {
					newHeight.height -= 26
					TweenMax.to(genymotionGroup, 0.3, {height: 26})
				}
				TweenMax.to(simulatorsGroup, 0.3, newHeight)
				TweenMax.to(connectedGroup, 0.3, {height: 26})
			}
		}

		protected function genymotionGroup_clickHandler(event:MouseEvent):void {
			if (genymotionGroup.height == 26) {
				showGenymotionGroup();
			}
		}

		protected function clickConnected_clickHandler(event:MouseEvent):void {
			if (connectedGroup.height == 26) {
				var newHeight:Object = {height: height - 96};
				if (genymotionManager != null && genymotionManager.visible) {
					newHeight.height -= 26
					TweenMax.to(genymotionGroup, 0.3, {height: 26})
				}
				TweenMax.to(connectedGroup, 0.3, newHeight)
				TweenMax.to(simulatorsGroup, 0.3, {height: 26})
			}
		}

		private function showGenymotionGroup():void {
			TweenMax.to(genymotionGroup, 0.3, {height: height - 120})
			TweenMax.to(simulatorsGroup, 0.3, {height: 26})
			TweenMax.to(connectedGroup, 0.3, {height: 26})
		}

		protected function settings_clickHandler(event:MouseEvent):void {
			// create and configure the TitleWindow
			/*const tw:SettingsWindow = new SettingsWindow();
            for each(var dv:RunningDevice in devices.collection) {
            if (!dv.simulator && dv is IosDevice) {
            tw.devices.push(dv);
            }
            }

            // open the TitleWindow as a modal popup window
            PopUpManager.addPopUp(tw, this, true);
            PopUpManager.centerPopUp(tw);*/

			settingsButton.enabled = false;
			settingsGroup.visible = true;
			TweenLite.to(settingsGroup, 0.3, {x: 4, onComplete: showSettingsComplete});
		}

		private function showSettingsComplete():void {
			settingsButton.enabled = true;
			settingsForm.reload(peerGroup);
		}

		public function restartServer():void {
			Alert.show("Dou you really want to restart the server ?\n(connected clients will be deconnected)", "Restart MobileStation server", Alert.YES | Alert.NO, this, alertClickHandler);
		}

		private function alertClickHandler(evt:CloseEvent):void {
			if (evt.detail == Alert.YES) {
				peerGroup.terminate();
				restartApp();
			}
		}

		protected function reloadButtons_clickHandler(event:MouseEvent):void {
			genymotionManager.fetchContent();
		}

		protected function settingsGroup_creationCompleteHandler(event:FlexEvent):void {
			settingsForm = new SettingsForm()
			settingsPanel.addContent(settingsForm);
			settingsGroup.width = width - 28;
			settingsGroup.x = -width - 10;

		}

		protected function finish_clickHandler(event:MouseEvent):void {
			saveValues(settingsForm.description, settingsForm.localName);
			TweenLite.to(settingsGroup, 0.3, {x: -width - 10, onComplete: hideSettingsComplete});
		}

		private function hideSettingsComplete():void {
			settingsGroup.visible = false;
		}

		protected function titleMouseDownHandler(event:MouseEvent):void {
			nativeWindow.startMove();
		}

		public function set genymotionActivated(value:Boolean):void {
			if (value) {
				genymotionManager.visible = true
				genymotionManager.fetchContent()
				showGenymotionGroup();
			} else {
				genymotionManager.visible = false
				TweenMax.to(connectedGroup, 0.3, {height: height - 96})
				TweenMax.to(simulatorsGroup, 0.3, {height: 26})
			}
		}
		]]>
	</fx:Script>
	<s:Rect bottom="10" left="14" right="14" top="10" filters="{dropShadowFilterApp}" radiusX="6" radiusY="6" alpha="0.98">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="#d0dae3"/>
				<s:GradientEntry color="#838b94"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	<s:Group id="mainGroup" top="10" right="10" left="10" bottom="10">
		<s:Group top="0" right="4" left="4" height="30" filters="{dropShadowFilter}" buttonMode="true"
				 mouseDown="titleMouseDownHandler(event)">
			<s:Rect bottom="0" left="0" right="0" top="0" topLeftRadiusX="6" topRightRadiusX="6">
				<s:fill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="#485563"/>
						<s:GradientEntry color="#29323c"/>
					</s:LinearGradient>
				</s:fill>
			</s:Rect>
			<s:Label id="titleLabel" fontSize="15" left="10" top="9" color="0xadb5bd" filters="{TopTitle.dropShadow}"/>
			<s:HGroup right="4" top="4" filters="{TopTitle.dropShadow}">
				<s:Group id="settingsButton" click="settings_clickHandler(event)">
					<s:BitmapImage source="assets/icons/24/gear.png"/>
				</s:Group>
				<s:Group id="closeButton" click="closeButtonClicked(event)">
					<s:BitmapImage source="assets/icons/24/close.png"/>
				</s:Group>
			</s:HGroup>
		</s:Group>
		
		<s:VGroup bottom="10" left="10" right="10" top="38" gap="2">
			<s:Group id="connectedGroup" height="100%" width="100%"
					 clipAndEnableScrolling="true">
				<s:Group height="26" buttonMode="true" click="clickConnected_clickHandler(event)" width="100%">
					<s:Rect	left="0" right="0" top="0" bottom="0" alpha="0.7" radiusX="3" radiusY="3">
						<s:fill>
							<s:LinearGradient rotation="90">
								<s:GradientEntry color="0x5a636c"/>
								<s:GradientEntry color="0x171e28"/>
							</s:LinearGradient>
						</s:fill>
						<s:stroke>
							<s:LinearGradientStroke rotation="90">
								<s:GradientEntry color="0x6e7780"/>
								<s:GradientEntry color="0x0f1217"/>
							</s:LinearGradientStroke>
						</s:stroke>
					</s:Rect>
					<s:Label verticalCenter="0" paddingLeft="7" fontSize="13" color="0xc8cdd2" text="Connected Devices" fontWeight="bold"
							 filters="{TopTitle.dropShadow}"/>
				</s:Group>
				<s:BitmapImage source="assets/icons/240/network.png" top="100" horizontalCenter="0"/>
				<s:VGroup top="21" left="0" right="0" bottom="30" gap="3">
					<s:VGroup filters="{RunningDeviceRenderer.dropShadowFilterMiddle}" gap="3" paddingTop="12" paddingLeft="2" paddingRight="2"
							  visible="{devices.collection.length==0}" includeInLayout="{devices.collection.length==0}">
						<s:Label fontWeight="bold" 
								 text="No devices found"/>
						<s:Label id="infoStatus" fontStyle="italic" fontSize="11"
								 text="(Connect devices with usb cable to this station)"/>
					</s:VGroup>
					
					<s:Spacer height="4"/>
					<s:List width="100%" height="100%"
							alternatingItemColors="[#efefef, #dedede]" borderVisible="false"
							contentBackgroundAlpha="0.0" dataProvider="{devices.collection}"
							itemRenderer="com.ats.gui.renderer.RunningDeviceRenderer" useVirtualLayout="false"/>
				</s:VGroup>
			</s:Group>
			
			<s:Group id="simulatorsGroup" height="26" width="100%" clipAndEnableScrolling="true">
				<s:Group id="clickGroup" buttonMode="true" height="26" width="100%"
						 click="clickGroup_clickHandler(event)">
					<s:Rect	left="0" right="0" top="0" bottom="0" alpha="0.7" radiusX="3" radiusY="3">
						<s:fill>
							<s:LinearGradient rotation="90">
								<s:GradientEntry color="0x5a636c"/>
								<s:GradientEntry color="0x171e28"/>
							</s:LinearGradient>
						</s:fill>
						<s:stroke>
							<s:LinearGradientStroke rotation="90">
								<s:GradientEntry color="0x6e7780"/>
								<s:GradientEntry color="0x0f1217"/>
							</s:LinearGradientStroke>
						</s:stroke>
					</s:Rect>
					<s:Label fontSize="13" verticalCenter="0" left="7" color="0xc8cdd2" text="Available Simulators" fontWeight="bold"
							 filters="{TopTitle.dropShadow}"/>
					
				</s:Group>
				<s:Label fontStyle="italic" fontSize="11" top="38"
						 text="{simulators.collection.length==0?simulators.info:''}" paddingLeft="5"/>
				<s:BitmapImage source="assets/icons/240/mobiles.png" top="100" horizontalCenter="0"/>
				<s:List width="100%" top="28" bottom="1"
						alternatingItemColors="[#efefef, #dedede]" borderVisible="false"
						contentBackgroundAlpha="0.0" dataProvider="{simulators.collection}"
						itemRenderer="com.ats.gui.renderer.SimulatorDeviceRenderer" useVirtualLayout="false"/>
			</s:Group>
			
			<s:Group id="genymotionGroup" width="100%" height="26" clipAndEnableScrolling="true" 
					 visible="{genymotionManager!=null &amp;&amp; genymotionManager.visible}" includeInLayout="{genymotionManager!=null &amp;&amp; genymotionManager.visible}">
				
				<s:Group height="26" width="100%">
					<s:Group buttonMode="true" height="26" width="100%"
							 click="genymotionGroup_clickHandler(event)">
						<s:Rect	left="0" right="0" top="0" bottom="0" alpha="0.7" radiusX="3" radiusY="3">
							<s:fill>
								<s:LinearGradient rotation="90">
									<s:GradientEntry color="0x5a636c"/>
									<s:GradientEntry color="0x171e28"/>
								</s:LinearGradient>
							</s:fill>
							<s:stroke>
								<s:LinearGradientStroke rotation="90">
									<s:GradientEntry color="0x6e7780"/>
									<s:GradientEntry color="0x0f1217"/>
								</s:LinearGradientStroke>
							</s:stroke>
						</s:Rect>
						<s:HGroup width="100%" paddingLeft="7" color="#c8cdd2" paddingRight="7" verticalCenter="0" verticalAlign="middle" gap="3"
								  filters="{TopTitle.dropShadow}">
							<s:Label fontSize="13" text="Genymotion Cloud" fontWeight="bold"/>
							<s:Label fontSize="11" width="100%" text="{GenymotionSaasSimulator.count==0?'':'- ' + GenymotionSaasSimulator.count + ' running instance'}{GenymotionSaasSimulator.count&gt;1?'s':''}"/>
							<s:Group id="reloadButtons" alpha="0.4" buttonMode="true" click="reloadButtons_clickHandler(event)"
									 height="20" width="20" toolTip="Reload Genymotion instances">
								<s:BitmapImage source="assets/icons/20/reload.png" smooth="true" smoothingQuality="high"/>
							</s:Group>
						</s:HGroup>
					</s:Group>
				</s:Group>
				<s:BitmapImage source="assets/icons/240/genymotion.png" top="90" horizontalCenter="0"/>
				<s:List left="0" right="0" top="28" bottom="1" visible="{!genymotionManager.loading}"
						borderVisible="false"
						contentBackgroundAlpha="0.0" dataProvider="{genymotionManager.recipes}"
						itemRenderer="com.ats.gui.renderer.GenymotionRecipeRenderer" useVirtualLayout="false"
						horizontalScrollPolicy="off"/>
			</s:Group>
		</s:VGroup>
		<s:VGroup id="settingsGroup" gap="0" top="0" bottom="0" creationComplete="settingsGroup_creationCompleteHandler(event)">
			<panels:TitlePanel id="settingsPanel" label="Settings" height="100%" width="100%"/>
			<panels:BottomButtons width="100%" activated="{!settingsForm.edit}">
				<buttons:BigButton label="Restart server"/>
				<buttons:BigButton label="Export devices" enabled="false"/>
				<buttons:BigButton label="Finish" click="finish_clickHandler(event)"/>
			</panels:BottomButtons>
		</s:VGroup>
	</s:Group>
</s:WindowedApplication>