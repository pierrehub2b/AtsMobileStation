<?xml version="1.0" encoding="utf-8"?>
<renderer:DeviceRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						 xmlns:s="library://ns.adobe.com/flex/spark" 
						 xmlns:mx="library://ns.adobe.com/flex/mx" 
						 removedFromStage="removedFromStageHandler(event)" 
						 xmlns:renderer="renderer.*" 
						 mouseChildren="{(data as RunningDevice).status==Device.READY}">
	
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			
			import flash.filters.BitmapFilterQuality;
			
			import mx.core.DragSource;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			
			import spark.filters.DropShadowFilter;
			
			import device.Device;
			import device.RunningDevice;
			import device.running.IosDevice;
			
			public static const dropShadowFilterMiddle:DropShadowFilter = new DropShadowFilter(4.0, 45, 0x000000, 0.2, 8.0, 8.0, 0.9, BitmapFilterQuality.HIGH, false, false, false);
			
			private function showWindow(event:MouseEvent, dev:RunningDevice):void{
				var tw:DeviceSettingsWindow = new DeviceSettingsWindow();
				tw.dev = dev;
				PopUpManager.addPopUp(tw, parentApplication as DisplayObject, true);
				PopUpManager.centerPopUp(tw);
			}
			
			private function goHome(event:MouseEvent, dev:RunningDevice):void{
				var request:URLRequest = new URLRequest();
				var urlLoader:URLLoader = new URLLoader();
				
				request.url = "http://" + dev.ip + ":" + dev.port + "/button";
				request.contentType = "text/plain";
				request.method = URLRequestMethod.POST;
				request.data = "home";
				
				urlLoader = new URLLoader();
				urlLoader.dataFormat = URLLoaderDataFormat.TEXT;
				urlLoader.load(request);
			}
			
			protected function restart_clickHandler(event:MouseEvent):void
			{
				enabled = false;
				restartButton.visible = false;
				callLater((data as RunningDevice).close)
			}
			
			protected function mainGroup_rollOverHandler(event:MouseEvent):void
			{
				if((data as RunningDevice).status == Device.READY){
					restartButton.includeInLayout = true;
					restartButton.visible = true;
				}
				
				if((data as RunningDevice) is IosDevice){
					iosButtons.visible = true;
				}
				
				TweenLite.fromTo([restartButton, iosButtons], 0.3, {alpha:0.0}, {alpha:1.0});
			}
			
			protected function mainGroup_rollOutHandler(event:MouseEvent):void
			{
				iosButtons.visible = false;
				
				iconStatus.visible = true;
				iconStatus.includeInLayout = true;
				
				restartButton.includeInLayout = false;
				restartButton.visible = false;
			}
			
			protected function removedFromStageHandler(event:Event):void
			{
				mainGroup.filters = []
			}
			
			protected function mouseDownHandler(event:MouseEvent):void
			{
				if((data as RunningDevice).status == Device.READY){
					firstGroup.addEventListener(MouseEvent.MOUSE_MOVE, mouseDownForDragHandler, false, 0, true);
				}
			}
			
			protected function mouseDownForDragHandler(event:MouseEvent):void{
				firstGroup.removeEventListener(MouseEvent.MOUSE_MOVE, mouseDownForDragHandler);
				
				var dragSource:DragSource = new DragSource();
				dragSource.addData("", "mobile");
				
				Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, (data as RunningDevice).ip + ":" + (data as RunningDevice).port, false);
				
				DragManager.doDrag(this, dragSource, event, firstGroup, mouseX - 20, mouseY + 10, 1.0);
			}
		]]>
	</fx:Script>
	
	<s:Group id="mainGroup" width="100%" verticalCenter="0" filters="{dropShadowFilterMiddle}"
			 rollOver="mainGroup_rollOverHandler(event)" rollOut="mainGroup_rollOutHandler(event)">
		<s:HGroup id="firstGroup" verticalAlign="middle" mouseDown="mouseDownHandler(event)" gap="0"
				  toolTip="{(data as RunningDevice).tooltip}" left="2">
			<s:BitmapImage  id="mobile" source="assets/icons/32/{(data is IosDevice)?'ios':'android'}.png" smooth="true" smoothingQuality="high"/>
			<s:VGroup gap="3" mouseEnabled="false" verticalAlign="bottom" height="100%">
				<s:Label visible="{(data as RunningDevice).ip==null}" includeInLayout="{(data as RunningDevice).ip==null}" 
						 text="Unable to get local ip !" fontStyle="italic" color="0x8a844a"/>
				<s:HGroup visible="{(data as RunningDevice).ip!=null}" includeInLayout="{(data as RunningDevice).ip!=null}" gap="0">
					<s:Label text="{(data as RunningDevice).ip}" fontWeight="bold" color="0x113b55"/>
					<s:Label text=":{(data as RunningDevice).port}" color="0x113b55"/>
					<s:Label text=" {(data as RunningDevice).errorMessage}" fontSize="11" fontStyle="italic" color="#FF0000"/>
				</s:HGroup>
				
				<s:Label text="{(data as RunningDevice).manufacturer}{(data as RunningDevice).simulator?' (Simulator)':''} - {(data as RunningDevice).modelName}" fontSize="11" fontStyle="italic" color="#758696"/>
				
			</s:VGroup>
		</s:HGroup>
		
		<s:HGroup right="7" verticalAlign="middle" verticalCenter="0">
			<s:HGroup id="iosButtons" width="100%" horizontalAlign="right" visible="false" verticalAlign="middle">
				<s:Group id="homeButton" buttonMode="true" click="goHome(event, (data as RunningDevice))"
						 toolTip="Device home button" visible="{(data as RunningDevice).status==Device.READY}">
					<s:BitmapImage source="assets/icons/24/home.png" smooth="true" smoothingQuality="high"/>
				</s:Group>
				<s:Group id="settingsButton" buttonMode="true" click="showWindow(event, (data as RunningDevice))"
						 toolTip="Settings of device">
					<s:BitmapImage source="assets/icons/24/tool.png" smooth="true" smoothingQuality="high"/>
				</s:Group>
			</s:HGroup>
			<s:Group width="24" height="24">
				<s:BitmapImage id="iconStatus" source="assets/icons/24/{(data as RunningDevice).status}.png" smooth="true" smoothingQuality="high"/>
				<s:Group id="restartButton" buttonMode="true" click="restart_clickHandler(event)"
						 toolTip="Restart driver" visible="false" includeInLayout="false">
					<s:BitmapImage source="assets/icons/24/restart.png" smooth="true" smoothingQuality="high"/>
				</s:Group>
			</s:Group>
		</s:HGroup>
	</s:Group>
	
</renderer:DeviceRenderer>