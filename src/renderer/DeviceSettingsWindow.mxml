<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="300" title="Device settings" 
			   close="closeHandler(event)"
			   initialize="settings_initializeHandler(event)">
	<fx:Script>
		<![CDATA[
			import device.RunningDevice;
			import device.running.AndroidDevice;
			import device.running.IosDevice;
			
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			public var dev:RunningDevice;
			public var arrayString:Array;
			public var arrayStringDevTeam:Array;
			
			protected function settings_initializeHandler(event:FlexEvent):void {
				
				if(dev != null) {
										
					deviceId.text = dev.id;
					deviceName.text = dev.modelName;
					
					if(dev is AndroidDevice){
						androidUsbGroup.visible = true;
						installAppButton.visible = false;
					} else {
						androidUsbGroup.visible = false;
						androidUsbGroup.height = 0;
					}
					
					var file:File = FlexGlobals.topLevelApplication.devicesSettingsFile;
					if(file.exists) {
						var fileStream:FileStream = new FileStream();
						fileStream.open(file, FileMode.READ);
						var content:String = fileStream.readUTFBytes(fileStream.bytesAvailable);
						arrayString = content.split("\n");
						for each(var line:String in arrayString) {
							if(line != "") {
								var arrayLineId: Array = line.split("==");
								if(arrayLineId[0].toString().toLowerCase() == dev.id.toString().toLowerCase()) {
									var arrayLineAttributes: Array = arrayLineId[1].split(";");
									portAutomatic.selected = arrayLineAttributes.length > 0 ? arrayLineAttributes[0].toString().toLocaleLowerCase() == "true" : false;
									portSelection.text = arrayLineAttributes.length > 1 ? arrayLineAttributes[1] : "";
									androidUsb.selected = arrayLineAttributes.length > 2 ? arrayLineAttributes[2].toString().toLocaleLowerCase() == "true" : false;
								}
							}
						}
						fileStream.close();
					}
				}
				
				portAutomatic.selected = portAutomatic.selected == false && portSelection.text == "";
				portSelection.enabled = !portAutomatic.selected;
			}
			
			private function closeHandler(event:CloseEvent):void{
				PopUpManager.removePopUp(this);
			}		
			
			protected function portAutomatic_changeHandler(event:Event):void
			{
				portSelection.enabled = !portAutomatic.selected;
				if(portSelection.enabled && (parseInt(portSelection.text) >= 64999 || parseInt(portSelection.text) <= 1024)) {
					portErrorMessage.visible = true;
					saveButton.enabled = false;
					portErrorMessageGroup.height = 10;
				} else {
					portErrorMessage.visible = false;
					saveButton.enabled = true;
					portErrorMessageGroup.height = 0;
				}
			}
			
			protected function portSelection_changeHandler(event:Event):void
			{
				var target:TextInput = event.currentTarget as TextInput;
				if(!target) return;
				if(parseInt(target.text) > 64999 || parseInt(target.text) <= 1024){
					portErrorMessage.visible = true;
					saveButton.enabled = false;
					portErrorMessageGroup.height = 10;
				} else {
					portErrorMessage.visible = false;
					saveButton.enabled = true;
					portErrorMessageGroup.height = 0;
				}
				portAutomatic.selected = portSelection.text == "";
			}
			
			protected function save_clickHandler(event:MouseEvent):void
			{
				var hasToRestart:Boolean = dev.settingsPort != portSelection.text || dev.automaticPort != portAutomatic.selected || dev.usbMode != androidUsb.selected;
				if(dev != null){ 
					dev.settingsPort = portSelection.text;
					dev.automaticPort = portAutomatic.selected;
					dev.usbMode = androidUsb.selected;
					//save profile
					var file:File = FlexGlobals.topLevelApplication.devicesSettingsFile;
					var fileStream:FileStream = new FileStream();
					fileStream.open(file, FileMode.WRITE);
					
					for each(var str:String in arrayString) {
						var arrayLineId: Array = str.split("==");
						if(arrayLineId[0].toString().toLowerCase() != dev.id.toString().toLowerCase()) {
							fileStream.writeUTFBytes(str + "\n");
						}
					}
					fileStream.writeUTFBytes(dev.id.toString().toLowerCase() + "==" + dev.automaticPort + ";" + dev.settingsPort + ";" + dev.usbMode);
					fileStream.close();
				}
				
				if(hasToRestart) {
					FlexGlobals.topLevelApplication.restartDevice(dev);
				}
				PopUpManager.removePopUp(this);
			}			
			
			private var userDir:File;
			protected function install_clickHandler(event:MouseEvent):void
			{
				userDir = File.userDirectory;
				var typeFilter:FileFilter = new FileFilter("App file","*.apk; *.app");
				
				userDir.addEventListener(Event.SELECT, fileSelected, false, 0, true);
				userDir.browse([typeFilter]);
			}
			
			private function fileSelected(ev:Event):void{
				userDir.removeEventListener(Event.SELECT, fileSelected);
				
				process = new NativeProcess();
				procInfo = new NativeProcessStartupInfo()
				
				procInfo.executable = new File("/usr/bin/xcrun");
				procInfo.workingDirectory = File.userDirectory;
				
				process.addEventListener(NativeProcessExitEvent.EXIT, onInstallExit, false, 0, true);
				process.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, onOutputError, false, 0, true);
				process.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, onOutput, false, 0, true);
				
				procInfo.arguments = new <String>["simctl", "install", dev.id, userDir.nativePath];
				process.start(procInfo);
				
				enabled = false;
			}
			
			protected function onOutputError(event:ProgressEvent):void
			{
				trace(process.standardError.readUTFBytes(process.standardError.bytesAvailable));
			}
			
			protected function onOutput(event:ProgressEvent):void{
				trace(process.standardOutput.readUTFBytes(process.standardOutput.bytesAvailable));
			}
			
			protected function onInstallExit(event:NativeProcessExitEvent):void{
				process.removeEventListener(NativeProcessExitEvent.EXIT, onInstallExit);
				process = null;
				procInfo = null;
				userDir = null;

				enabled = true;
			}
			
			private var process:NativeProcess;
			private var procInfo:NativeProcessStartupInfo;
			
			protected function copyId_clickHandler(event:MouseEvent):void
			{
				Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, dev.id);
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup left="6" right="6" top="10" bottom="36" gap="8" horizontalAlign="center"
			  verticalAlign="middle">
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label fontSize="11" fontWeight="bold" text="Name :"/>
			<s:Label id="deviceName" width="100%" fontSize="11"/>
		</s:HGroup>
		<s:Label id="deviceId" left="3" width="100%" color="#888888" fontSize="10" fontStyle="italic"
				 text="sdf54sd65f46sd5" verticalCenter="2"/>

		<mx:HRule width="98%"/>

		<s:HGroup id="portSelectionGroup" width="100%" gap="3" verticalAlign="middle" verticalCenter="0">
			<s:HGroup width="100%" horizontalAlign="left" verticalAlign="baseline">
				<s:Label fontSize="11" fontWeight="bold" paddingRight="5" text="Driver port :"/>
				<s:CheckBox id="portAutomatic" label="Auto"
							change="portAutomatic_changeHandler(event)" fontSize="11"
							fontStyle="normal" textDecoration="none"/>
				<s:TextInput id="portSelection" width="100%" height="100%" restrict="0-9" maxChars="5" change="portSelection_changeHandler(event)" />
			</s:HGroup>
		</s:HGroup>
		
		<s:HGroup height="0" id="portErrorMessageGroup" width="100%" gap="3" verticalAlign="middle" verticalCenter="0">
			<s:HGroup width="100%" horizontalAlign="left" verticalAlign="baseline">
				<s:Label id="portErrorMessage" visible="false" fontSize="11" paddingRight="5" color="#FF0000" text="Port value must be between 1025 and 64999"/>
			</s:HGroup>
		</s:HGroup>
		
		<s:HGroup width="100%" gap="3" verticalAlign="middle" verticalCenter="0" visible="true">
			<s:HGroup id="androidUsbGroup" width="100%" horizontalAlign="left" verticalAlign="baseline" visible="true">
				<s:Label fontSize="11" fontWeight="bold" paddingRight="5" text="USB mode :"/>
				<s:CheckBox id="androidUsb"
							change="portAutomatic_changeHandler(event)" fontSize="11"
							fontStyle="normal" textDecoration="none"/>
			</s:HGroup>
		</s:HGroup>

	</s:VGroup>
	
	<s:Group left="0" right="0" bottom="0" height="30">
		<s:Rect left="0" right="0" top="0" bottom="0" alpha="0.5">
			<s:fill>
				<s:LinearGradient rotation="-10">
					<s:GradientEntry color="0xbcc1c4"/>
					<s:GradientEntry color="0xced0d2"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		
		<s:HGroup left="5" right="5" gap="2" horizontalAlign="center" verticalCenter="0">
			<s:Button label="Copy device id" icon="assets/icons/16/copy.png" click="copyId_clickHandler(event)"/>
			<s:Button id="installAppButton" label="Install app" click="install_clickHandler(event)" fontSize="11"
					  icon="assets/icons/16/download.png"/>
			<s:Button label="Finish" click="save_clickHandler(event)" fontSize="11" id="saveButton"
					  icon="assets/icons/16/tick.png"/>
		</s:HGroup>
	</s:Group>
</s:TitleWindow>
