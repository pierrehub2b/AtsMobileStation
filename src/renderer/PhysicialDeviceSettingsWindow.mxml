<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="300" title="Device settings" 
			   close="closeHandler(event)"
			   initialize="settings_initializeHandler(event)">
	<fx:Script>
		<![CDATA[
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import device.RunningDevice;
			
			public var dev:RunningDevice;
			public var arrayString:Array;
			public var arrayStringDevTeam:Array;
			public var lastbuild:String = "";
			
			public var devices:Array = new Array();
			
			protected function settings_initializeHandler(event:FlexEvent):void {
				var fileDevTeam:File = File.userDirectory.resolvePath("actiontestscript/settings.txt");
				if(fileDevTeam.exists) {
					var fileStreamSettings:FileStream = new FileStream();
					fileStreamSettings.open(fileDevTeam, FileMode.READ);
					var settingsContent:String = fileStreamSettings.readUTFBytes(fileStreamSettings.bytesAvailable);
					var settingsContentArray: Array = settingsContent.split("\n");
					for each(var setting:String in settingsContentArray) {
						if(setting != "") {
							var key:String = setting.split("==")[0];
							if(key == "development_team") {
								devTeamId.text = setting.split("==")[1];
							}
							if(key == "last_build") {
								lastbuild = setting.split("==")[1];
							}
						}
					}
					fileStreamSettings.close();
				}
			}
			
			private function closeHandler(event:CloseEvent):void{
				PopUpManager.removePopUp(this);
			}		
			
			protected function save_clickHandler(event:MouseEvent):void
			{			
				var file:File = File.userDirectory.resolvePath("actiontestscript/settings.txt");
				var fileStream:FileStream = new FileStream();
				fileStream.open(file, FileMode.WRITE);
				fileStream.writeUTFBytes("development_team==" + devTeamId.text + "\n");
				fileStream.writeUTFBytes("last_build==" + lastbuild);
				fileStream.close();
				PopUpManager.removePopUp(this);
			}			
			
			private var userDir:File;
			protected function install_clickHandler(event:MouseEvent):void
			{
				userDir = File.userDirectory;
				var typeFilter:FileFilter = new FileFilter("App file","*.apk; *.app");
				
				userDir.addEventListener(Event.SELECT, fileSelected, false, 0, true);
				userDir.browse([typeFilter]);
			}
			
			private function fileSelected(ev:Event):void{
				userDir.removeEventListener(Event.SELECT, fileSelected);
				
				process = new NativeProcess();
				procInfo = new NativeProcessStartupInfo()
				
				procInfo.executable = new File("/usr/bin/xcrun");
				procInfo.workingDirectory = File.userDirectory;
				
				process.addEventListener(NativeProcessExitEvent.EXIT, onInstallExit, false, 0, true);
				process.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, onOutputError, false, 0, true);
				process.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, onOutput, false, 0, true);
				
				procInfo.arguments = new <String>["simctl", "install", dev.id, userDir.nativePath];
				process.start(procInfo);
				
				enabled = false;
			}
			
			protected function onOutputError(event:ProgressEvent):void
			{
				trace(process.standardError.readUTFBytes(process.standardError.bytesAvailable));
			}
			
			protected function onOutput(event:ProgressEvent):void{
				trace(process.standardOutput.readUTFBytes(process.standardOutput.bytesAvailable));
			}
			
			protected function onInstallExit(event:NativeProcessExitEvent):void{
				process.removeEventListener(NativeProcessExitEvent.EXIT, onInstallExit);
				process = null;
				procInfo = null;
				userDir = null;
				
				enabled = true;
			}
			
			private var process:NativeProcess;
			private var procInfo:NativeProcessStartupInfo;
			
			protected function copyId_clickHandler(event:MouseEvent):void
			{
				var file:FileReference = new FileReference();
				var txtInput: String = "Device ID\tDevice Name\tDevice Platform\n";
				for each(var d:RunningDevice in devices) {
					if(d.manufacturer == "Apple") {
						txtInput += d.id + "\t" + d.modelName + "\tios\n";
					}
				}
				file.save(txtInput, "devices.txt")
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup left="6" right="6" top="10" bottom="36" gap="8" horizontalAlign="center"
			  verticalAlign="middle">
		<s:HGroup width="100%" gap="3" verticalAlign="middle" verticalCenter="0">
			<s:HGroup width="100%" horizontalAlign="left" verticalAlign="baseline">
				<s:Label fontSize="11" fontWeight="bold" paddingRight="5" text="Development team ID :"/>
				<s:TextInput id="devTeamId" width="100%" height="100%" maxChars="10"/>
			</s:HGroup>
			
		</s:HGroup>
		
	</s:VGroup>
	
	<s:Group left="0" right="0" bottom="0" height="30">
		<s:Rect left="0" right="0" top="0" bottom="0" alpha="0.5">
			<s:fill>
				<s:LinearGradient rotation="-10">
					<s:GradientEntry color="0xbcc1c4"/>
					<s:GradientEntry color="0xced0d2"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		
		<s:HGroup left="5" right="5" gap="2" horizontalAlign="center" verticalCenter="0">
			<s:Button label="Export device list" icon="assets/icons/16/copy.png" click="copyId_clickHandler(event)"/>
			<s:Button label="Finish" click="save_clickHandler(event)" fontSize="11"
					  icon="assets/icons/16/tick.png"/>
		</s:HGroup>
	</s:Group>
</s:TitleWindow>
