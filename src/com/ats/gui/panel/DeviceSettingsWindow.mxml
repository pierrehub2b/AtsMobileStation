<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="320" title="Device settings" 
			   close="closeHandler(event)"
			   initialize="settings_initializeHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.ats.device.running.AndroidDevice;
			import com.ats.device.running.RunningDevice;
			import com.ats.helpers.DevicePortSettings;
			import com.ats.helpers.DevicePortSettingsHelper;
			import com.ats.helpers.DeviceSettings;
			import com.ats.helpers.DeviceSettingsHelper;
			import com.ats.helpers.PortSwitcher;
			
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			public var dev:RunningDevice;
			public var arrayString:Array;
			public var arrayStringDevTeam:Array;
			
			private var portSwitcher:PortSwitcher = new PortSwitcher();
			
			private var deviceSettingsHelper:DeviceSettingsHelper = DeviceSettingsHelper.shared;
			private var deviceSettings:DeviceSettings;
			
			private var devicePortSettingsHelper:DevicePortSettingsHelper = DevicePortSettingsHelper.shared;
			private var devicePortSettings:DevicePortSettings;
			
			protected function settings_initializeHandler(event:FlexEvent):void {
				if (dev != null) {
					deviceId.text = dev.id;
					deviceName.text = dev.modelName;
					
					if (dev is AndroidDevice) {
						androidUsbGroup.visible = !dev.simulator; //true;
						androidUsbGroup.includeInLayout = !dev.simulator; //true;
						//installAppButton.visible = false;
					} else {
						androidUsbGroup.visible = false;
						androidUsbGroup.includeInLayout = false;
						//installAppButton.visible = true;
					}
					
					deviceSettings = deviceSettingsHelper.getSettingsForDevice(dev.id);
					devicePortSettings = devicePortSettingsHelper.getPortSetting(dev.id);
					
					portAutomatic.selected = deviceSettings.automaticPort;
					androidUsb.selected = deviceSettings.usbMode;
					portSelection.text = portAutomatic.selected ? "" : deviceSettings.port.toString();
					portSelection.enabled = !portAutomatic.selected;
				}
			}
			
			private function closeHandler(event:CloseEvent):void {
				PopUpManager.removePopUp(this);
			}
			
			private function set errorMessage(value:String):void{
				if(value == null || value == ""){
					errorMessageLabel.visible = false;
					errorMessageLabel.includeInLayout = false;
				}else{
					errorMessageLabel.text = value;
					errorMessageLabel.visible = true;
					errorMessageLabel.includeInLayout = true;
				}
			}
			
			protected function portAutomatic_changeHandler(event:Event):void {
				portSelection.enabled = !portAutomatic.selected;
				portSelection.text = portAutomatic.selected == true ? "" : deviceSettings.port.toString();
				
				if (portSelection.text != "") {
					var port:int = parseInt(portSelection.text);
					validatePort(port)
				} else {
					errorMessage = null;
					saveButton.enabled = true;
				}
			}
			
			protected function portSelection_changeHandler(event:Event):void {
				var target:TextInput = event.currentTarget as TextInput;
				if (!target) return;
				
				if (target.text != "") {
					var port:int = parseInt(target.text);
					validatePort(port)
				} else {
					errorMessage = null;
					saveButton.enabled = true;
				}
				
				portAutomatic.selected = portSelection.text == "";
			}
			
			private function validatePort(port:int):void {
				
				errorMessage = null;
				saveButton.enabled = true;
				
				if (port > 64999 || port <= 1024) {
					errorMessage = "Port value must be between 1025 and 64999";
				}
				
				if (deviceIsLocalhost() == true) {
					var currentLocalPort:int = devicePortSettings == null ? -1 : devicePortSettings.port;
					if (portSwitcher.checkSocketPortAvailability(port) == false && port != currentLocalPort) {
						errorMessage = "Port is unavailable";
					}
					
					var registeredDevice:String = DevicePortSettingsHelper.shared.deviceForRegisteredPort(port);
					if (registeredDevice != null && registeredDevice.toLowerCase() != dev.id.toLowerCase()) {
						errorMessage = "Port already assigned on device\n" + registeredDevice;
					}
				}
			}
			
			private function deviceIsLocalhost():Boolean {
				return androidUsb.selected == true || dev.simulator == true;
			}
			
			protected function save_clickHandler(event:MouseEvent):void {
				var hasToRestart:Boolean = dev.settingsPort != portSelection.text || dev.automaticPort != portAutomatic.selected || dev.usbMode != androidUsb.selected;
				if (dev != null) {
					dev.settingsPort = portAutomatic.selected == true ? dev.port : portSelection.text;
					dev.automaticPort = portAutomatic.selected;
					dev.usbMode = androidUsb.selected;
					
					deviceSettings.usbMode = dev.usbMode;
					deviceSettings.automaticPort = dev.automaticPort;
					
					if (dev.automaticPort == false) {
						deviceSettings.port = parseInt(portSelection.text);
					} else {
						// localhost
						var existingDevicePort:int = DevicePortSettingsHelper.shared.getPortOfDevice(dev.id);
						deviceSettings.port = existingDevicePort == -1 ? 8080 : existingDevicePort;
						
						// wifi
						deviceSettings.port = 8080;
					}
					
					deviceSettingsHelper.save(deviceSettings);
					
					if (dev.simulator == true || dev.usbMode == true) {
						var portSettings:DevicePortSettings = new DevicePortSettings(dev.id, deviceSettings.port);
						devicePortSettingsHelper.addSettings(portSettings);
					}
				}
				
				if (hasToRestart) {
					FlexGlobals.topLevelApplication.restartDevice(dev);
				}
				
				PopUpManager.removePopUp(this);
			}
			
			private var userDir:File;
			
			protected function install_clickHandler(event:MouseEvent):void {
				userDir = File.userDirectory;
				var typeFilter:FileFilter = new FileFilter("App file", "*.apk; *.app");
				
				userDir.addEventListener(Event.SELECT, fileSelected, false, 0, true);
				userDir.browse([typeFilter]);
			}
			
			private function fileSelected(ev:Event):void {
				userDir.removeEventListener(Event.SELECT, fileSelected);
				
				process = new NativeProcess();
				procInfo = new NativeProcessStartupInfo();
				
				procInfo.executable = new File("/usr/bin/xcrun");
				procInfo.workingDirectory = File.userDirectory;
				
				process.addEventListener(NativeProcessExitEvent.EXIT, onInstallExit, false, 0, true);
				process.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, onOutputError, false, 0, true);
				process.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, onOutput, false, 0, true);
				
				procInfo.arguments = new <String>["simctl", "install", dev.id, userDir.nativePath];
				process.start(procInfo);
				
				enabled = false;
			}
			
			protected function onOutputError(event:ProgressEvent):void {
				trace(process.standardError.readUTFBytes(process.standardError.bytesAvailable));
			}
			
			protected function onOutput(event:ProgressEvent):void {
				trace(process.standardOutput.readUTFBytes(process.standardOutput.bytesAvailable));
			}
			
			protected function onInstallExit(event:NativeProcessExitEvent):void {
				process.removeEventListener(NativeProcessExitEvent.EXIT, onInstallExit);
				process = null;
				procInfo = null;
				userDir = null;
				
				enabled = true;
			}
			
			private var process:NativeProcess;
			private var procInfo:NativeProcessStartupInfo;
			
			protected function copyId_clickHandler(event:MouseEvent):void {
				Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, dev.id);
			}
		]]>
	</fx:Script>
	
	<s:VGroup left="6" right="6" top="10" bottom="36" gap="8" horizontalAlign="center"
			  verticalAlign="middle">
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label fontSize="11" fontWeight="bold" text="Name :"/>
			<s:Label id="deviceName" width="100%" fontSize="11"/>
		</s:HGroup>
		<s:Label id="deviceId" left="3" width="100%" color="#888888" fontSize="10" fontStyle="italic"
				 text="sdf54sd65f46sd5" verticalCenter="2"/>
		
		<mx:HRule width="98%"/>
		
		<s:HGroup id="portSelectionGroup" width="100%" gap="3" verticalAlign="middle">
			
			<s:HGroup id="androidUsbGroup" visible="true" paddingRight="20" verticalAlign="middle">
				<s:Label fontSize="11" fontWeight="bold" paddingRight="5" text="USB mode :"/>
				<s:CheckBox id="androidUsb" fontSize="11" textDecoration="none"/>
			</s:HGroup>
			
			<s:Label fontSize="11" fontWeight="bold" paddingRight="5" text="Driver port :"/>
			<s:CheckBox id="portAutomatic" label="Auto" change="portAutomatic_changeHandler(event)"
						fontSize="11" lineThrough="{!portAutomatic.selected}"/>
			<s:TextInput id="portSelection" width="100%" restrict="0-9" maxChars="5" change="portSelection_changeHandler(event)" />

		</s:HGroup>
		<s:Label id="errorMessageLabel" visible="false" includeInLayout="false" 
				 fontSize="11" paddingRight="5" color="#FF0000" text="Port value must be between 1025 and 64999"
				 width="100%"/>
		
<!--		<s:HGroup width="100%" gap="3" verticalAlign="middle" verticalCenter="0" visible="true">
			<s:HGroup id="androidUsbGroup" width="100%" horizontalAlign="left" verticalAlign="baseline" visible="true">
				<s:Label fontSize="11" fontWeight="bold" paddingRight="5" text="USB mode :"/>
				<s:CheckBox id="androidUsb" fontSize="11" fontStyle="normal" textDecoration="none"/>
			</s:HGroup>
		</s:HGroup>-->
		
	</s:VGroup>
	
	<s:Group left="0" right="0" bottom="0" height="30">
		<s:Rect left="0" right="0" top="0" bottom="0" alpha="0.5">
			<s:fill>
				<s:LinearGradient rotation="-10">
					<s:GradientEntry color="0xbcc1c4"/>
					<s:GradientEntry color="0xced0d2"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		
		<s:HGroup left="5" right="5" gap="2" horizontalAlign="center" verticalCenter="0">
			<s:Button label="Copy device id" icon="assets/icons/16/copy.png" click="copyId_clickHandler(event)"/>
			<s:Button id="installAppButton" label="Install app" click="install_clickHandler(event)" fontSize="11"
					  icon="assets/icons/16/download.png"/>
			<s:Button label="Finish" click="save_clickHandler(event)" fontSize="11" id="saveButton"
					  icon="assets/icons/16/tick.png"/>
		</s:HGroup>
	</s:Group>
</s:TitleWindow>
