<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:buttons="com.caipture.gui.buttons.*" 
		  xmlns:text="com.caipture.gui.text.*" gap="10" xmlns:panels="com.caipture.gui.panels.*">
	
	<fx:Script>
		<![CDATA[
		import com.ats.gui.alert.CredentialsAlert;
		import com.ats.helpers.Settings;
		import com.ats.managers.gmsaas.GmsaasInstaller;
		import com.ats.managers.gmsaas.GmsaasInstallerErrorEvent;
		import com.ats.managers.gmsaas.GmsaasInstallerProgressEvent;
		import com.ats.tools.PeerGroupConnection;

		import mx.core.FlexGlobals;
		import mx.managers.PopUpManager;

		public function reload(peer:PeerGroupConnection):void {
			msName.text = peer.name;
			msDescription.text = peer.description;

			pythonFolderPath.text = Settings.getInstance().pythonPath

			gmsaas = GmsaasInstaller.isInstalled()
		}

		private function set gmsaas(value:Boolean):void {
			gmsaasUninstallButton.enabled = value
			gmsaasInstallButton.enabled = !value
			gmsaasCredentialsButton.enabled = value
		}

		protected function installGmsaas(event:Event):void {
			genymotionInfoLabel.text = "Installing..."

			var installer:GmsaasInstaller = new GmsaasInstaller()
			installer.addEventListener(GmsaasInstallerErrorEvent.ERROR, installerErrorHandler);
			installer.addEventListener(GmsaasInstallerProgressEvent.PROGRESS, installerProgressHandler);
			installer.install()
		}

		protected function uninstallGmsaas(event:Event):void {
			genymotionInfoLabel.text = "Uninstalling..."

			var installer:GmsaasInstaller = new GmsaasInstaller()
			installer.addEventListener(GmsaasInstallerErrorEvent.ERROR, installerErrorHandler);
			installer.addEventListener(GmsaasInstallerProgressEvent.PROGRESS, installerProgressHandler);
			installer.uninstall()
		}

		private function installerErrorHandler(event:GmsaasInstallerErrorEvent):void {
			var installer:GmsaasInstaller = event.currentTarget as GmsaasInstaller
			installer.removeEventListener(GmsaasInstallerErrorEvent.ERROR, installerErrorHandler);
			installer.removeEventListener(GmsaasInstallerProgressEvent.PROGRESS, installerProgressHandler);

			genymotionInfoLabel.text = null
		}

		private function installerProgressHandler(event:GmsaasInstallerProgressEvent):void {
			var installer:GmsaasInstaller = event.currentTarget as GmsaasInstaller

			switch (event.state) {
				case GmsaasInstaller.GMSAAS_INSTALLER_STATE_INSTALL_COMPLETED:
					installer.removeEventListener(GmsaasInstallerErrorEvent.ERROR, installerErrorHandler);
					installer.removeEventListener(GmsaasInstallerProgressEvent.PROGRESS, installerProgressHandler);

					genymotionInfoLabel.text = null
					gmsaas = true
					FlexGlobals.topLevelApplication.genymotionManager.visible = true
					FlexGlobals.topLevelApplication.genymotionManager.fetchContent()
					break;
				case GmsaasInstaller.GMSAAS_INSTALLER_STATE_UNINSTALL_COMPLETED:
					installer.removeEventListener(GmsaasInstallerErrorEvent.ERROR, installerErrorHandler);
					installer.removeEventListener(GmsaasInstallerProgressEvent.PROGRESS, installerProgressHandler);

					genymotionInfoLabel.text = null
					gmsaas = false
					FlexGlobals.topLevelApplication.genymotionManager.visible = false

					break
			}
		}

		protected function editCredentials(event:Event):void {
			const credentialsAlert:CredentialsAlert = new CredentialsAlert();
			credentialsAlert.successCallback = credentialsCompleteHandler
			PopUpManager.addPopUp(credentialsAlert, this, true);
			PopUpManager.centerPopUp(credentialsAlert);
		}

		private function credentialsCompleteHandler(alert:CredentialsAlert):void {
			PopUpManager.removePopUp(alert)
		}

		public function get localName():String {
			return msName.text
		}

		public function get description():String {
			return msDescription.text
		}

		protected function loadPythonPath_clickHandler(event:MouseEvent):void {
			var directory:File = Settings.defaultAppFolder;
			directory.addEventListener(Event.SELECT, pythonFolderSelected);
			directory.browseForDirectory("Select Python directory");
		}

		protected function pythonFolderSelected(event:Event):void {
			event.currentTarget.removeEventListener(Event.SELECT, pythonFolderSelected);
			Settings.getInstance().pythonFolder = event.target as File
			pythonFolderPath.text = Settings.getInstance().pythonPath
		}
		]]>
	</fx:Script>
	<text:InputText id="msName" label="Mobile Station name" width="100%"/>
	<text:InputText id="msDescription" label="Description" width="100%" lines="4"/>
	<s:Spacer height="16"/>
	<s:HGroup width="100%" verticalAlign="bottom">
		<text:InputText id="pythonFolderPath" label="Python folder" width="100%"/>
		<buttons:SmallButton click="loadPythonPath_clickHandler(event)"/>
	</s:HGroup>
	<s:Spacer height="16"/>
	<s:Group width="100%">
		<panels:InsetPanel label="Genymotion Cloud" width="100%" height="100%"/>
		<s:HGroup width="100%" top="26" paddingLeft="7" paddingRight="5" paddingBottom="5"
				  horizontalAlign="center">
			<buttons:SmallButton id="gmsaasInstallButton" label="Install components" click="installGmsaas(event)" fontSize="12"/>
			<buttons:SmallButton id="gmsaasCredentialsButton" label="Set credentials" click="editCredentials(event)" fontSize="12"/>
			<buttons:SmallButton id="gmsaasUninstallButton" label="Uninstall" click="uninstallGmsaas(event)" fontSize="12"/>
		</s:HGroup>
		<s:Label id="genymotionInfoLabel" color="white"/>
	</s:Group>
	<s:Spacer height="10"/>
	<text:InputText label="Apple development team ID" width="100%" enabled="false"/>
	<mx:LinkButton width="100%" label="Apple Developer account" fontStyle="normal" fontSize="14"
				   textAlign="left" color="0xadb5bd" enabled="false"/>
	<mx:LinkButton width="100%" label="ATS MobileStation configuration" fontStyle="normal" fontSize="14"
				   textAlign="left" color="0xadb5bd"/>
</s:VGroup>